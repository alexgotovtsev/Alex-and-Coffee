import { AddCartType } from '@/types/AddCartType';
import { NextApiRequest, NextApiResponse } from 'next';
import { v4 as uuidv4 } from 'uuid';
import { PrismaClient } from '@prisma/client';

const calculateOrderAmount = (items: AddCartType[]) => {
  const totalPrice = items.reduce((acc, item) => {
    return acc + item.unit_amount! * item.quantity!;
  }, 0);
  return totalPrice;
};

const prisma = new PrismaClient();

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –∏–∑ –±–æ–¥–∏
  const { items, payment_intent_id } = req.body;

  // —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞
  const orderData = {
    // user
    amount: calculateOrderAmount(items),
    currency: '–†—É–±',
    status: '–û–∂–∏–¥–∞–Ω–∏–µ',
    paymentIntentId: payment_intent_id,
    products: {
      create: items.map((item) => ({
        name: item.name,
        type: item.type,
        unit: item.unit,
        quantity: item.quantity,
        unit_amount: item.unit_amount,
      })),
    },
  };

  // –µ—Å–ª–∏ –ø–∞–ª–∞—Ç–µ–∂–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
  if (payment_intent_id) {
    // –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const existing_order = await prisma.order.findFirst({
      where: { paymentIntentId: payment_intent_id },
      include: { products: true },
    });

    console.log(existing_order, 'üí•üí•');

    if (!existing_order) {
      res.status(400).json({ message: 'Invalid Payment Intent' });
    }

    // –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
    const updated_order = await prisma.order.update({
      where: { id: existing_order?.id },
      data: {
        amount: calculateOrderAmount(items),
        products: {
          deleteMany: {},
          create: items.map((item) => ({
            name: item.name,
            type: item.type,
            unit: item.unit,
            quantity: item.quantity,
            unit_amount: item.unit_amount,
          })),
        },
      },
    });
    console.log('üî¥', updated_order);

    res.status(200).json({ paymentIntent: payment_intent_id });
    return;
  } else {
    // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ø—Ä–∏–∑–º–µ
    const paymentIntent = uuidv4();
    orderData.paymentIntentId = paymentIntent;
    const newOrder = await prisma.order.create({
      data: orderData,
    });
    console.log('‚úÖ', newOrder);
    res.status(200).json({ paymentIntent });
    return;
  }
}
